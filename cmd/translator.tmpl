{{ define "translator" }}
package {{ .Locale }}

import (
	"math"
	"strconv"
	"time"

	"github.com/moisespsena-go/locales"
	"github.com/moisespsena-go/locales/currency"
)

type {{ .Locale }} struct {
    *locales.NumberSpec
    *locales.CurrencySpec
    *locales.TimeSpec
    *locales.DurationSpec

	locale     			   string
	pluralsCardinal 	   []locales.PluralRule
	pluralsOrdinal  	   []locales.PluralRule
	pluralsRange		   []locales.PluralRule
	percent    			   string
	{{- if gt (len .FmtPercentPrefix) 0}}
	percentPrefix   	   string
	{{- end }}
	{{- if gt (len .FmtPercentSuffix) 0}}
	percentSuffix   	   string
	{{- end }}
	perMille   			   string
	inifinity			   string
    dateFullLayout         string
    dateLongLayout         string
    dateMediumLayout       string
    dateShortLayout        string
    timeFullLayout         string
    timeLongLayout         string
    timeMediumLayout       string
    timeShortLayout        string
    listPatterns    *locales.ListPatterns
    miscPatterns locales.MiscPatterns
}

// New returns a new instance of translator for the '{{ .Locale }}' locale
func New() locales.Translator {
	return &{{ .Locale }}{
	    NumberSpec: &locales.NumberSpec{
            {{- if gt (len .Minus) 0}}
            MinusValue:     "{{ .Minus }}",
            {{- end}}
            {{- if gt (len .Group) 0}}
	        GroupValue: "{{ .Group }}",
            {{- end}}
            {{- if gt (len .Decimal) 0}}
            DecimalValue:   "{{ .Decimal }}",
            {{- end}}
	    },
        CurrencySpec: &locales.CurrencySpec{
            CurrenciesValue:    {{ .Currencies }},
            Formatters: {{.CurrencyFormatters}},
        },
        TimeSpec: &locales.TimeSpec{
            {{- if gt (len .TimeSeparator) 0}}
        	Separator:	 "{{ .TimeSeparator }}",
        	{{- end}}
        	{{- if gt (len .FmtMonthsAbbreviated) 0 }}
            MonthsAbbreviatedValue:   {{ .FmtMonthsAbbreviated }},
            {{- end -}}
            {{- if gt (len .FmtMonthsNarrow) 0 }}
            MonthsNarrowValue:   {{ .FmtMonthsNarrow }},
            {{- end -}}
            {{- if gt (len .FmtMonthsWide) 0 }}
            MonthsWideValue:   {{ .FmtMonthsWide }},
            {{- end -}}
            {{- if gt (len .FmtDaysAbbreviated) 0 }}
            WeekdaysAbbreviatedValue:   {{ .FmtDaysAbbreviated }},
            {{- end -}}
            {{- if gt (len .FmtDaysNarrow) 0 }}
            WeekdaysNarrowValue:   {{ .FmtDaysNarrow }},
            {{- end -}}
            {{- if gt (len .FmtDaysShort) 0 }}
            WeekdaysShortValue:   {{ .FmtDaysShort }},
            {{- end -}}
            {{- if gt (len .FmtDaysWide) 0 }}
            WeekdaysWideValue:   {{ .FmtDaysWide }},
            {{- end -}}
            {{- if gt (len .FmtPeriodsAbbreviated) 0 }}
            PeriodsAbbreviatedValue:   {{ .FmtPeriodsAbbreviated }},
            {{- end -}}
            {{- if gt (len .FmtPeriodsNarrow) 0 }}
            PeriodsNarrowValue:   {{ .FmtPeriodsNarrow }},
            {{- end -}}
            {{- if gt (len .FmtPeriodsShort) 0 }}
            PeriodsShortValue:   {{ .FmtPeriodsShort }},
            {{- end -}}
            {{- if gt (len .FmtPeriodsWide) 0 }}
            PeriodsWideValue:   {{ .FmtPeriodsWide }},
            {{- end -}}
            {{- if gt (len .FmtErasAbbreviated) 0 }}
            ErasAbbreviatedValue:   {{ .FmtErasAbbreviated }},
            {{- end -}}
            {{- if gt (len .FmtErasNarrow) 0 }}
            ErasNarrowValue:   {{ .FmtErasNarrow }},
            {{- end -}}
            {{- if gt (len .FmtErasWide) 0 }}
            ErasWideValue:   {{ .FmtErasWide }},
            {{- end }}
            TimezonesValue: {{ .FmtTimezones }},
        },

		locale:   		 "{{ .Locale }}",
		pluralsCardinal: {{ .Plurals }},
		pluralsOrdinal:  {{ .PluralsOrdinal }},
		pluralsRange:    {{ .PluralsRange }},

		{{- if gt (len .Percent) 0}}
		percent:  		 "{{ .Percent }}",
		{{- end}}
		{{- if gt (len .PerMille) 0}}
		perMille:        "{{ .PerMille }}",
		{{- end}}

		{{- if gt (len .Infinity) 0}}
		inifinity:		 "{{ .Infinity }}",
		{{- end}}

        dateFullLayout: "{{ .DateFullLayout }}",
        dateLongLayout: "{{ .DateLongLayout }}",
        dateMediumLayout: "{{ .DateMediumLayout }}",
        dateShortLayout: "{{ .DateShortLayout }}",
        timeFullLayout: "{{ .TimeFullLayout }}",
        timeLongLayout: "{{ .TimeLongLayout }}",
        timeMediumLayout: "{{ .TimeMediumLayout }}",
        timeShortLayout: "{{ .TimeShortLayout }}",
        listPatterns: locales.NewListPatternsFromSlice({{ .DisplayListPatterns }}),
        {{- if .DurationSpec}}
        DurationSpec: {{.DurationSpec}},
        {{- end}}
        miscPatterns: locales.MiscPatterns{
            "{{ .MiscPatternsApproximately }}",
        	"{{ .MiscPatternsAtLeast }}",
        	"{{ .MiscPatternsAtMost }}",
        	"{{ .MiscPatternsRange }}",
        },
	}
}

// Locale returns the current translators string locale
func({{ .BaseLocale }} *{{ .Locale }}) Locale() string {
	return {{ .BaseLocale }}.locale
}


// PluralsCardinal returns the list of cardinal plural rules associated with '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) PluralsCardinal() []locales.PluralRule {
	return {{ .BaseLocale }}.pluralsCardinal
}

// PluralsOrdinal returns the list of ordinal plural rules associated with '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) PluralsOrdinal() []locales.PluralRule {
	return {{ .BaseLocale }}.pluralsOrdinal
}

// PluralsRange returns the list of range plural rules associated with '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) PluralsRange() []locales.PluralRule {
	return {{ .BaseLocale }}.pluralsRange
}

// CardinalPluralRule returns the cardinal PluralRule given 'num' and digits/precision of 'v' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) CardinalPluralRule(num float64, v uint64) locales.PluralRule {
	{{ .CardinalFunc }}
}

// OrdinalPluralRule returns the ordinal PluralRule given 'num' and digits/precision of 'v' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) OrdinalPluralRule(num float64, v uint64) locales.PluralRule {
	{{ .OrdinalFunc }}
}

// RangePluralRule returns the ordinal PluralRule given 'num1', 'num2' and digits/precision of 'v1' and 'v2' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) RangePluralRule(num1 float64, v1 uint64,num2 float64, v2 uint64) locales.PluralRule {
	{{ .RangeFunc }}
}

// FmtDateShort returns the short date representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtDateShort(t time.Time) string {
	return {{ .FmtDateShort }}
}

// FmtDateMedium returns the medium date representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtDateMedium(t time.Time) string {
	return {{ .FmtDateMedium }}
}

// FmtDateLong returns the long date representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtDateLong(t time.Time) string {
	return {{ .FmtDateLong }}
}

// FmtDateFull returns the full date representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtDateFull(t time.Time) string {
	return {{ .FmtDateFull }}
}

// FmtTimeShort returns the short time representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtTimeShort(t time.Time) string {
	return {{ .FmtTimeShort }}
}

// FmtTimeMedium returns the medium time representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtTimeMedium(t time.Time) string {
	return {{ .FmtTimeMedium }}
}

// FmtTimeLong returns the long time representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtTimeLong(t time.Time) string {
	return {{ .FmtTimeLong }}
}

// FmtTimeFull returns the full time representation of 't' for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) FmtTimeFull(t time.Time) string {
	return {{ .FmtTimeFull }}
}

// DateFullLayout returns the full date layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) DateFullLayout() string {
	return {{ .BaseLocale }}.dateFullLayout
}

// DateLongLayout returns the long date layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) DateLongLayout() string {
	return {{ .BaseLocale }}.dateLongLayout
}

// DateMediumLayout returns the medium date layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) DateMediumLayout() string {
	return {{ .BaseLocale }}.dateMediumLayout
}

// DateShortLayout returns the short date layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) DateShortLayout() string {
	return {{ .BaseLocale }}.dateShortLayout
}

// TimeFullLayout returns the full time layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) TimeFullLayout() string {
	return {{ .BaseLocale }}.timeFullLayout
}

// TimeLongLayout returns the full long layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) TimeLongLayout() string {
	return {{ .BaseLocale }}.timeLongLayout
}

// TimeMediumLayout returns the medium time layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) TimeMediumLayout() string {
	return {{ .BaseLocale }}.timeMediumLayout
}

// TimeShortLayout returns the short time layout for '{{ .Locale }}'
func({{ .BaseLocale }} *{{ .Locale }}) TimeShortLayout() string {
	return {{ .BaseLocale }}.timeShortLayout
}

func({{ .BaseLocale }} *{{ .Locale }}) ListPatterns() *locales.ListPatterns {
	return {{ .BaseLocale }}.listPatterns
}

func({{ .BaseLocale }} *{{ .Locale }}) GetDurationSpec() *locales.DurationSpec {
	return {{ .BaseLocale }}.DurationSpec
}

func({{ .BaseLocale }} *{{ .Locale }}) GetMiscPatterns() *locales.MiscPatterns {
	return &{{ .BaseLocale }}.miscPatterns
}
{{ end }}
